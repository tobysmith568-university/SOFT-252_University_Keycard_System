/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import Control.Data;
import Control.KeycardFactory;
import Control.Log;
import Listeners.ILogObserver;
import Locations.*;
import Locations.States.LocationState;
import People.Keycard;
import People.Role;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.io.File;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import javax.swing.*;
import static javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * The main GUI for the program
 * @author Student
 */
public class MainWindow extends javax.swing.JFrame implements ILogObserver{
    
    private final String STATELOCATION = "Current.state";
    
    private final DefaultListModel campusListModel;
    private final DefaultListModel buildingListModel;
    private final DefaultListModel floorListModel;
    private final DefaultListModel roomListModel;
    private final DefaultListModel roomDisplayListModel;
    
    private int selectedCampusIndex;
    private int selectedBuildingIndex;
    private int selectedFloorIndex;
    private int selectedRoomIndex;
    
    private final DefaultListModel logListModel;
    
    private final DefaultListModel usersListModel;
    private final DefaultListModel usersDisplayListModel;
    
    private final DefaultComboBoxModel locationStates;
    private Location selectedLocation;
    
    private final JPopupMenu userFilterMenu;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        campusListModel = new DefaultListModel();
        buildingListModel = new DefaultListModel();
        floorListModel = new DefaultListModel();
        roomListModel = new DefaultListModel();
        roomDisplayListModel = new DefaultListModel();
        
        logListModel = new DefaultListModel();
        
        usersListModel = new DefaultListModel();
        usersDisplayListModel = new DefaultListModel();
        
        locationStates = new DefaultComboBoxModel();
        
        userFilterMenu = new JPopupMenu();
        
        Log.Logger().AddLogObserver(this);
        if (Data.LoadState(STATELOCATION) == null) {
            String[] options = {"Yes, load default data", "No, open with no data", "Cancel"};
        
            //Show an option dialog to the user to confirm if they want to load in the default data sets
            switch (JOptionPane.showOptionDialog(this, 
                                "No data can be found in the system!.\n"
                                        + "\n"
                                        + "Would you like to load in the default data sets?",
                                "Load default data?",
                                JOptionPane.YES_NO_CANCEL_OPTION,
                                JOptionPane.WARNING_MESSAGE,
                                null,
                                options,
                                options[0])) {
                default:
                    break;
                //If the user confirms they do want to load in the default data sets
                case 0:
                    Data.SetDefaultState();
                    break;
                //If the user confirms they want to exit
                case 2:
                    dispose();
                    break;
            }
        }
        
        UpdateLocationStates();
        
        RefreshCampusListModel();
        
        AddClosingWarning();
        
        initComponents();
        setLocationRelativeTo(null);
        
        GenerateUserFilterMenu();
        PopulateUsers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstRooms = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstCampuses = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstBuildings = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstFloors = new javax.swing.JList<>();
        btnSaveAll = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        lstLog = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        cbxState = new javax.swing.JComboBox<>();
        btnAddLocation = new javax.swing.JButton();
        btnUpdateMode = new javax.swing.JButton();
        btnAddCampus = new javax.swing.JButton();
        btnDeleteLocation = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        lstUsers = new javax.swing.JList<>();
        btnRoleMenu = new javax.swing.JButton();
        btnAddUser = new javax.swing.JButton();
        btnDeleteUser = new javax.swing.JButton();
        btnEditUser = new javax.swing.JButton();
        btnSimulate = new javax.swing.JButton();
        btnViewLog = new javax.swing.JButton();
        btnExportData = new javax.swing.JButton();
        btnImportData = new javax.swing.JButton();
        btnReadOnly = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Keycard System");
        setResizable(false);

        lstRooms.setModel(roomDisplayListModel);
        lstRooms.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lstRoomsMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(lstRooms);

        lstCampuses.setModel(campusListModel);
        lstCampuses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lstCampusesMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(lstCampuses);

        lstBuildings.setModel(buildingListModel);
        lstBuildings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lstBuildingsMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(lstBuildings);

        lstFloors.setModel(floorListModel);
        lstFloors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lstFloorsMouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(lstFloors);

        btnSaveAll.setText("Save All Data");
        btnSaveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAllActionPerformed(evt);
            }
        });

        lstLog.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        lstLog.setModel(logListModel);
        lstLog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstLogMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(lstLog);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Current mode:");

        cbxState.setModel(locationStates);
        cbxState.setEnabled(false);

        btnAddLocation.setText("Add Child Location");
        btnAddLocation.setEnabled(false);
        btnAddLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddLocationActionPerformed(evt);
            }
        });

        btnUpdateMode.setText("Update");
        btnUpdateMode.setEnabled(false);
        btnUpdateMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateModeActionPerformed(evt);
            }
        });

        btnAddCampus.setText("Add New Campus");
        btnAddCampus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCampusActionPerformed(evt);
            }
        });

        btnDeleteLocation.setForeground(new java.awt.Color(255, 0, 0));
        btnDeleteLocation.setText("Delete Location");
        btnDeleteLocation.setEnabled(false);
        btnDeleteLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteLocationActionPerformed(evt);
            }
        });

        lstUsers.setModel(usersDisplayListModel);
        lstUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lstUsersMouseReleased(evt);
            }
        });
        jScrollPane6.setViewportView(lstUsers);

        btnRoleMenu.setText("Filter Roles");
        btnRoleMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRoleMenuActionPerformed(evt);
            }
        });

        btnAddUser.setText("Add New User");
        btnAddUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddUserActionPerformed(evt);
            }
        });

        btnDeleteUser.setForeground(new java.awt.Color(255, 0, 0));
        btnDeleteUser.setText("Delete User");
        btnDeleteUser.setEnabled(false);
        btnDeleteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteUserActionPerformed(evt);
            }
        });

        btnEditUser.setText("Edit User");
        btnEditUser.setEnabled(false);
        btnEditUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditUserActionPerformed(evt);
            }
        });

        btnSimulate.setText("Simulate In Room");
        btnSimulate.setEnabled(false);
        btnSimulate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimulateActionPerformed(evt);
            }
        });

        btnViewLog.setText("View Log");
        btnViewLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewLogActionPerformed(evt);
            }
        });

        btnExportData.setText("Export As...");
        btnExportData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportDataActionPerformed(evt);
            }
        });

        btnImportData.setText("Import From...");
        btnImportData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportDataActionPerformed(evt);
            }
        });

        btnReadOnly.setText("Import (read-only) From...");
        btnReadOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadOnlyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbxState, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdateMode)
                                .addGap(104, 104, 104)
                                .addComponent(btnAddCampus))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnAddUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnDeleteUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnRoleMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnEditUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSimulate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnSaveAll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnExportData, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnViewLog, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnImportData, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnReadOnly, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnAddLocation)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnDeleteLocation))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAddCampus, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDeleteLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbxState, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnUpdateMode, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRoleMenu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSaveAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddUser)
                            .addComponent(btnReadOnly))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEditUser)
                            .addComponent(btnImportData))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSimulate)
                            .addComponent(btnExportData))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDeleteUser)
                            .addComponent(btnViewLog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Whenever the save all data button is pressed
    private void btnSaveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAllActionPerformed
        Data.SaveState(STATELOCATION, Data.allCampuses, Data.allKeycards);
    }//GEN-LAST:event_btnSaveAllActionPerformed

    //Whenever a log item is selected
    private void lstLogMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstLogMouseClicked
        DeselectLogItem();
    }//GEN-LAST:event_lstLogMouseClicked

    //Whenever a building is selected
    private void lstBuildingsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstBuildingsMouseReleased
        selectedBuildingIndex = CheckForDeselect(evt, selectedBuildingIndex);
        SetLocationToBuilding();        
        UpdateStateDropdown();
        RefreshFloorListModel();
        EnableLocationControls();
        SetSimulate();
    }//GEN-LAST:event_lstBuildingsMouseReleased

    //Whenever a floor is selected
    private void lstFloorsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstFloorsMouseReleased
        selectedFloorIndex = CheckForDeselect(evt, selectedFloorIndex);
        SetLocationToFloor();
        UpdateStateDropdown();
        RefreshRoomListModel();
        EnableLocationControls();
        SetSimulate();
    }//GEN-LAST:event_lstFloorsMouseReleased

    //Whenever a campus is selected
    private void lstCampusesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstCampusesMouseReleased
        selectedCampusIndex = CheckForDeselect(evt, selectedCampusIndex);
        SetLocationToCampus();
        UpdateStateDropdown();
        RefreshBuildingListModel();
        EnableLocationControls();
        SetSimulate();
    }//GEN-LAST:event_lstCampusesMouseReleased

    //Whenever a room is selected
    private void lstRoomsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstRoomsMouseReleased
        selectedRoomIndex = CheckForDeselect(evt, selectedRoomIndex);
        SetLocationToRoom();
        UpdateStateDropdown();
        DisableChildControls();
        SetSimulate();
    }//GEN-LAST:event_lstRoomsMouseReleased

    //Whenever the add new location button is pressed
    private void btnAddLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddLocationActionPerformed
        NewChildLocation();
    }//GEN-LAST:event_btnAddLocationActionPerformed

    //Whenever the update mode (state) button is pressed
    private void btnUpdateModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateModeActionPerformed
        UpdateCurrentState();
    }//GEN-LAST:event_btnUpdateModeActionPerformed

    //Whenever the add new campus button is pressed
    private void btnAddCampusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCampusActionPerformed
        NewCampusLocation();
    }//GEN-LAST:event_btnAddCampusActionPerformed

    //Whenever the delete location button is pressed
    private void btnDeleteLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteLocationActionPerformed
        DeleteSelectedLocation();
    }//GEN-LAST:event_btnDeleteLocationActionPerformed

    //Whenever the role menu button is pressed
    private void btnRoleMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRoleMenuActionPerformed
        OpenUserFilterMenu();
    }//GEN-LAST:event_btnRoleMenuActionPerformed

    //Whenever the add user button is pressed
    private void btnAddUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddUserActionPerformed
        AddNewUser();
    }//GEN-LAST:event_btnAddUserActionPerformed

    //Whenever the delete user button is pressed
    private void btnDeleteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteUserActionPerformed
        DeleteSelectedUser();
    }//GEN-LAST:event_btnDeleteUserActionPerformed

    //Whenever a keycard is selected
    private void lstUsersMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstUsersMouseReleased
        SetUserControls(true);
        SetSimulate();
    }//GEN-LAST:event_lstUsersMouseReleased

    //Whenever the edit user (keycard) button is pressed
    private void btnEditUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditUserActionPerformed
        EditSelectedUser();
    }//GEN-LAST:event_btnEditUserActionPerformed

    //Whenever the simulate user (keycard) button is pressed
    private void btnSimulateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimulateActionPerformed
        SimulateUser();
    }//GEN-LAST:event_btnSimulateActionPerformed

    //Whenever the view log button is pressed
    private void btnViewLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewLogActionPerformed
        OpenTodaysLog();
    }//GEN-LAST:event_btnViewLogActionPerformed

    //Whenever the export data button is pressed
    private void btnExportDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportDataActionPerformed
        ExportData();
    }//GEN-LAST:event_btnExportDataActionPerformed

    //Whenever the import data button is pressed
    private void btnImportDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportDataActionPerformed
        ImportData();
    }//GEN-LAST:event_btnImportDataActionPerformed

    //Whenever the import data (read-only) button is pressed
    private void btnReadOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadOnlyActionPerformed
        ReadOnly();
    }//GEN-LAST:event_btnReadOnlyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainWindow().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCampus;
    private javax.swing.JButton btnAddLocation;
    private javax.swing.JButton btnAddUser;
    private javax.swing.JButton btnDeleteLocation;
    private javax.swing.JButton btnDeleteUser;
    private javax.swing.JButton btnEditUser;
    private javax.swing.JButton btnExportData;
    private javax.swing.JButton btnImportData;
    private javax.swing.JButton btnReadOnly;
    private javax.swing.JButton btnRoleMenu;
    private javax.swing.JButton btnSaveAll;
    private javax.swing.JButton btnSimulate;
    private javax.swing.JButton btnUpdateMode;
    private javax.swing.JButton btnViewLog;
    private javax.swing.JComboBox<String> cbxState;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JList<String> lstBuildings;
    private javax.swing.JList<String> lstCampuses;
    private javax.swing.JList<String> lstFloors;
    private javax.swing.JList<String> lstLog;
    private javax.swing.JList<String> lstRooms;
    private javax.swing.JList<String> lstUsers;
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void ObservedLogUpdate(String message) {
        logListModel.addElement(message);
        if (logListModel.getSize() == 6)
            logListModel.remove(0);
    }
    
    
    private void RefreshCampusListModel() {
        //Clear all the location lists right of and including campuses
        campusListModel.clear();
        buildingListModel.clear();
        floorListModel.clear();
        roomListModel.clear();
        roomDisplayListModel.clear();
        
        //Add in each campus found in the data        
        Data.allCampuses.values().forEach((campus) -> {
            campusListModel.addElement(campus.GetName());
        });
    }

    private void RefreshBuildingListModel() {
        //Clear all the location lists right of and including buildings
        buildingListModel.clear();
        floorListModel.clear();
        roomListModel.clear();
        roomDisplayListModel.clear();
        
        //Find the currently selected campus
        Campus selectedCampus = Data.allCampuses.get(lstCampuses.getSelectedValue());
        
        //Add in each building found in the campus
        for(Building building : selectedCampus.GetAllChildren()) {
            buildingListModel.addElement(building.GetName());
        }
    }

    private void RefreshFloorListModel() {
        //Clear all the location lists right of and including floors
        floorListModel.clear();
        roomListModel.clear();
        roomDisplayListModel.clear();
        
        //Find the currently selected building
        Campus selectedCampus = Data.allCampuses.get(lstCampuses.getSelectedValue());
        Building selectedBuilding = selectedCampus.GetChild(lstBuildings.getSelectedValue());
        
        //Add in each floor found in the building
        for(Floor floor : selectedBuilding.GetAllChildren()) {
            floorListModel.addElement(floor.GetFloorNumber());
        }
    }

    private void RefreshRoomListModel() {
        //Clear all the location lists right of and including rooms
        roomListModel.clear();
        roomDisplayListModel.clear();
        
        //Find the currently selected Floofloor
        Campus selectedCampus = Data.allCampuses.get(lstCampuses.getSelectedValue());
        Building selectedBuilding = selectedCampus.GetChild(lstBuildings.getSelectedValue());
        Floor selectedFloor = selectedBuilding.GetChild(lstFloors.getSelectedValue());
        
        //Add in each room found in that floor
        for(Room room : selectedFloor.GetAllChildren()) {
            roomDisplayListModel.addElement(selectedFloor.GetFloorNumber() + room.GetNumber() + " (" + room.GetRoomType() + ")");
            roomListModel.addElement(room.GetNumber());
        }
    }

    private void DeselectLogItem() {
        lstLog.clearSelection();
    }

    private void UpdateStateDropdown() {
        //Show "Mixed State" if the current location is in a mixed state
        if (selectedLocation.GetIsMixedState())
            cbxState.setSelectedIndex(-1);
        else
            //Else select the correct index by comparing the names of all states
            //to the selectedLocation's state
            for (int i = 0; i < locationStates.getSize(); i++) {
                if (locationStates.getElementAt(i) == selectedLocation.GetState().GetName())
                    cbxState.getModel().setSelectedItem(selectedLocation.GetState().GetName());
            }
    }

    private void EnableLocationControls() {
        cbxState.setEnabled(true);
        btnUpdateMode.setEnabled(true);
        btnAddLocation.setEnabled(true);
        btnDeleteLocation.setEnabled(true);
    }

    private void DisableChildControls() {
        btnAddLocation.setEnabled(false);
    }

    private void UpdateLocationStates() {
        locationStates.removeAllElements();
        for (LocationState state : LocationState.values()) {
            locationStates.addElement(state.GetName());
        }
    }

    private void SetLocationToCampus() {
        selectedLocation = Data.allCampuses.get(lstCampuses.getSelectedValue());
    }

    private void SetLocationToBuilding() {
        SetLocationToCampus();
        selectedLocation = ((Campus)selectedLocation).GetChild(lstBuildings.getSelectedValue());
    }

    private void SetLocationToFloor() {
        SetLocationToBuilding();
        selectedLocation = ((Building)selectedLocation).GetChild(lstFloors.getSelectedValue());
    }

    private void SetLocationToRoom() {
        SetLocationToFloor();
        selectedLocation = ((Floor)selectedLocation).GetChild((String)roomListModel.getElementAt(lstRooms.getSelectedIndex()));
    }

    private void UpdateCurrentState() {
        //Do nothing if no state is selected
        if (cbxState.getSelectedIndex() == -1)
            return;
        
        //Find the state wanted to change to
        LocationState newState = LocationState.values()[cbxState.getSelectedIndex()];
        
        //Ask the user for a reason for the state change
        UpdateReason dialog = new UpdateReason(this, true, selectedLocation.GetFullName(), newState);
        dialog.setVisible(true);
        
        //If a reason was successfully given update the currently selected location
        //Else reset the state dropdown
        if(dialog.WasUpdatePressed()) {
            selectedLocation.SetRoomState(newState, dialog.GetReason());
        } else {
            UpdateStateDropdown();
        }
    }

    private void NewChildLocation() {
        //If the currently selected location is a campus, add a building to it
        if (selectedLocation instanceof Campus) {
            //Open a new building dialog window
            NewBuilding dialog = new NewBuilding(this, true);
            dialog.setVisible(true);
            
            //If the window was successfully used
            if(dialog.WasCreatePressed()) {
                ((Campus)selectedLocation).AddBuilding(dialog.GetName(), dialog.GetShortcode());
                RefreshBuildingListModel();
            }
            
        //If the currently selected location is a building, add a floor to it
        } else if (selectedLocation instanceof Building) {
            ((Building)selectedLocation).AddFloor();
            RefreshFloorListModel();
            
        //If the currently selected location is a floor, add a room to it
        } else if (selectedLocation instanceof Floor) {
            //Open a new room dialog window
            NewRoom dialog = new NewRoom(this, true);
            dialog.setVisible(true);
            
            //If the window was successfully used
            if(dialog.WasCreatePressed()) {
                ((Floor)selectedLocation).AddRoom(dialog.GetType());
                RefreshRoomListModel();
            }
        }
    }

    private void NewCampusLocation() {
        //Open a new campus dialog window
        NewCampus dialog = new NewCampus(this, true);
        dialog.setVisible(true);
        
        //If the window is successfully used
        if(dialog.WasCreatePressed()) {
            Data.allCampuses.put(dialog.GetName(), new Campus(dialog.GetName()));
            Log.Log("Added new Campus \"" + dialog.GetName() + "\"");
            RefreshCampusListModel();
        }
    }

    private void DeleteSelectedLocation() {
        //Create the appropriate warning message
        String message = "Are you really sure you want to perminantly delete this location?"
                                    + "\nIt will not be recoverable";        
        if (selectedLocation instanceof Floor || selectedLocation instanceof Room)
            message += " and removing it may cause numbered locations to have un-fillable gaps!";
        else
            message += "!";
        
        String[] options = {"Yes, Delete It", "No, Save It", "Cancel"};
        
        //Show a option box asing is the user is sure
        switch (JOptionPane.showOptionDialog(this,
                            message,
                            "Delete this location?",
                            JOptionPane.YES_NO_CANCEL_OPTION,//I like both no and cancel options even if they both do the same thing
                            JOptionPane.WARNING_MESSAGE,
                            null,
                            options,
                            options[1])) {
            default:
                break;
            //If the user confirms they do want to delete the selected location
            case 0:
                //If the selected location is a campus
                if (selectedLocation instanceof Campus) {
                    Data.allCampuses.remove(((Campus)selectedLocation).GetName());
                    RefreshCampusListModel();
                    selectedLocation = null;
                    
                //If the selected location is a building
                } else if (selectedLocation instanceof Building) {
                    //Find the parent location
                    Campus parent = ((Building)selectedLocation).GetCampus();
                    
                    //Remove the unwanted location from the parent
                    parent.RemoveBuilding((Building)selectedLocation);
                    RefreshBuildingListModel();
                    selectedLocation = ((Building)selectedLocation).GetCampus();
                    
                //If the selected location is a floor
                } else if (selectedLocation instanceof Floor) {
                    //Find the parent location
                    Building parent = ((Floor)selectedLocation).GetBuilding();
                    
                    //Remove the unwanted location from the parent
                    parent.RemoveFloor((Floor)selectedLocation);
                    RefreshFloorListModel();
                    selectedLocation = ((Floor)selectedLocation).GetBuilding();
                    
                //If the selected location is a room
                } else {
                    //Find the parent location
                    Floor parent = ((Room)selectedLocation).GetFloor();
                    
                    //Remove the unwanted location from the parent
                    parent.RemoveRoom((Room)selectedLocation);
                    RefreshRoomListModel();
                    selectedLocation = ((Room)selectedLocation).GetFloor();
                    EnableLocationControls();
                }
                break;
        }
    }

    private void GenerateUserFilterMenu() {
        //For every role, create a new JCheckBox and add it to the menu
        for (Role role : Role.values()) {
            JCheckBox cb = new JCheckBox(role.GetPluralName() + " ");
            cb.setSelected(true);
            cb.addActionListener((ActionEvent ae) -> {
                //Make checking or unchecking the JCheckBox re-populate the user (keycard) list
                PopulateUsers();
            });
            userFilterMenu.add(cb);
        }
    }

    private void AddClosingWarning() {
        Component thisFrame = this;
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                //Show a Cconfirm dialog window confirming if the user wants to save
                switch (JOptionPane.showConfirmDialog(thisFrame, 
                                    "Would you like to save all data before exiting?",
                                    "Save?", JOptionPane.YES_NO_CANCEL_OPTION,
                                    JOptionPane.QUESTION_MESSAGE)) {
                    
                    //If the user does want to save before exiting
                    case JOptionPane.YES_OPTION:
                        Data.SaveState(STATELOCATION, Data.allCampuses, Data.allKeycards);
                        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        break;
                    
                    //If the user wants to do nothing and NOT close the program
                    case JOptionPane.CANCEL_OPTION:
                        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
                        break;
                    
                    //If the user does NOT want to save before exiting
                    case JOptionPane.NO_OPTION:
                        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        break;                        
                }
            }
        });
    }

    private void OpenUserFilterMenu() {
        userFilterMenu.show(btnRoleMenu, 0, 0 + btnRoleMenu.getBounds().height);
    }

    private void PopulateUsers() {
        SetUserControls(false);
        usersListModel.clear();
        usersDisplayListModel.clear();
        
        //Find all the role checkboxes in the role menu
        Component[] checkboxes = userFilterMenu.getComponents();
        
        //For each one that's enabled, add it to a list
        ArrayList<Role> enabledRoles = new ArrayList<>();
        for (int i = 0; i < checkboxes.length; i++) {
            if (((JCheckBox)checkboxes[i]).isSelected())
                enabledRoles.add(Role.values()[i]);
        }
        
        //Take all the keycards
        Data.allKeycards.values().stream()
            //Filter them by those that have an enabled role
            .filter(keycard -> FoundIntersection(keycard.GetRoles(), enabledRoles))
            //Sort them alphabetically
            .sorted(Comparator.comparing(Keycard::GetName))
            //And add them to both lists of keycards
            .forEachOrdered(keycard -> {
                usersListModel.addElement(keycard);
                usersDisplayListModel.addElement(keycard.GetCardID() + ": " + keycard.GetName() + " (" + keycard.GetRolesString(" / ") + ")");
            });  
        
    }
    
    private boolean FoundIntersection(Role[] roles1, ArrayList<Role> roles2) {
        //Take all of the first given roles
        return Arrays.stream(roles1)
                //Filter them by those which match any of the second given roles
                .filter(r1 -> roles2.stream().anyMatch(r2 -> r2 == r1))
                //Return if the result is greater than 0
                .count() > 0;
    }

    private void AddNewUser() {
        //Show a new user dialog window
        NewUser dialog = new NewUser(this, true);
        dialog.setVisible(true);
        
        //If the window is successfully used
        if(dialog.WasCreatePressed()) {
            //Create a new keycard with the details from the dialog window
            Keycard newKeycard = KeycardFactory.Create(dialog.GetRoles(), dialog.GetName());
            
            //Tell the logger
            Log.Log("Added new keycard: " + newKeycard.GetCardID() + " - "
                    + newKeycard.GetName() + " (" + newKeycard.GetRolesString(" / ") + ")");
            
            PopulateUsers();
        }
    }

    private void DeleteSelectedUser() {
        String message = "Are you really sure you want to perminantly delete this user?"
                                    + "\nThey will not be recoverable!";
        String[] options = {"Yes, Delete Them", "No, Save Them", "Cancel"};
        
        //Show an option dialog to the user asking if they want to delete the selected user
        switch (JOptionPane.showOptionDialog(this,
                            message,
                            "Delete this user?",
                            JOptionPane.YES_NO_CANCEL_OPTION,//I like both no and cancel options even if they both do the same thing
                            JOptionPane.WARNING_MESSAGE,
                            null,
                            options,
                            options[1])) {
            default:
                break;
            //If the user confirms they do want to delete the selected user
            case 0:
                //Delete the user by finding it's ID by taking everything from the selected user
                //before the first colon
                Data.allKeycards.remove(lstUsers.getSelectedValue().split(":")[0]);
                PopulateUsers();
                break;
        }
    }

    private void SetUserControls(boolean state) {
        btnEditUser.setEnabled(state);
        btnDeleteUser.setEnabled(state);
    }

    private void EditSelectedUser() {
        //Show an edit user (keycard) dialog to the user
        EditUser dialog = new EditUser(this, true, Data.allKeycards.get(lstUsers.getSelectedValue().split(":")[0]));
        dialog.setVisible(true);
        
        //If the dialog was successfully used
        if(dialog.WasUpdatePressed()) {
            PopulateUsers();
        }
    }

    private void SetSimulate() {
        btnSimulate.setEnabled(lstUsers.getSelectedIndex() != -1 && lstRooms.getSelectedIndex() != -1);
    }

    private void SimulateUser() {
       ((Room)selectedLocation).AccessRequest(Data.allKeycards.get(lstUsers.getSelectedValue().split(":")[0]));
    }

    private void OpenTodaysLog() {
        ShowFullLog dialog = new ShowFullLog(this, true, Log.Logger().GetTodaysLogFile());
        dialog.setVisible(true);
    }

    private void ExportData() {
        //Open a file chooser to ask the user for a location
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setFileFilter(new FileNameExtensionFilter(".state file", "state"));
        
        //If the user found a wanted location
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            //Find the wanted file location
            File file = new File(fileChooser.getSelectedFile().toString() + ".state");
            
            //Save the current state to that file location
            Data.SaveState(file.getPath(), Data.allCampuses, Data.allKeycards);
        }
    }

    private void ImportData() {
        String[] options = {"Yes, Overwrite all", "No, Open read-only version", "Cancel"};
        
        //Show an option dialog to the user to confirm they do want to overwrite the current state
        switch (JOptionPane.showOptionDialog(this, 
                            "This will overwrite ALL locations and keycards in the system.\n"
                                    + "Are you sure you want to do this?\n"
                                    + "\n"
                                    + "If you would like to open and READ ONLY a previous state, click read-only.",
                            "Overwrite all?",
                            JOptionPane.YES_NO_CANCEL_OPTION,
                            JOptionPane.WARNING_MESSAGE,
                            null,
                            options,
                            options[1])) {
            
            //If the user confirms they want to overwrite the current state
            case JOptionPane.YES_OPTION:
                //Open a file chooser to ask the user for a location
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setAcceptAllFileFilterUsed(false);
                fileChooser.setFileFilter(new FileNameExtensionFilter(".state file", "state"));
                
                //If the user found a wanted location
                if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                    //Find the wanted file location
                    File file = new File(fileChooser.getSelectedFile().toString());
                    
                    //Load the data in that file, if it's successful
                    if (Data.LoadState(file.getPath()) != null) {
                        RefreshCampusListModel();
                        PopulateUsers();
                    }
                }
                break;
                
            //If the user confirms they want to view a state but NOT overwrite the current data
            case JOptionPane.NO_OPTION:
                ReadOnly();
                break;
                
            //If the user confirms they want to do NOTHING
            default:
                break;
        }
    }

    private void ReadOnly() {
        //Open a file chooser to ask the user for a location
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setFileFilter(new FileNameExtensionFilter(".state file", "state"));
        fileChooser.setCurrentDirectory(new File("Emergency Logs"));
        
        //If the user found a wanted location
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            //Find the wanted path
            Path path = new File(fileChooser.getSelectedFile().toString()).toPath();
            
            //Find the title to display
            //  If it's a program-generated state fire, include the parent directory
            //  Else just have the file name
            String title;
            if (path.getName(path.getNameCount() - 2).toString().matches("EM_\\d\\d-\\d\\d-\\d\\d_\\d\\d-\\d\\d-\\d\\d"))
                title = path.subpath(path.getNameCount() - 2, path.getNameCount()).toString();
            else
                title = path.getFileName().toString();
            
            //Load the data into just a variable, not the whole program
            Data data = Data.ReadState(path.toString());
            
            //If that's successful, open a view state dialog with it
            if (data != null) {
                ViewState dialog = new ViewState(this, true, data, title);
                dialog.setVisible(true);
            }
        }
    }

    private int CheckForDeselect(MouseEvent evt, int givenList) {
        //If control is pressed, assume it's a de-selection so
        //re-select the last selected index
        if (evt.isControlDown())
            ((JList)evt.getSource()).setSelectedIndex(givenList);
        
        //Else update the last selected index to this one
        else
            givenList = ((JList)evt.getSource()).getSelectedIndex();
        
        return givenList;
    }
}
