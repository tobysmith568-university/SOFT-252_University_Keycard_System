/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import Control.Data;
import Control.Log;
import Listeners.ILogObserver;
import Locations.Building;
import Locations.Campus;
import Locations.Floor;
import Locations.Location;
import Locations.Room;
import Locations.States.LocationState;
import java.awt.Component;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE;

/**
 *
 * @author Student
 */
public class MainWindow extends javax.swing.JFrame implements ILogObserver{
    
    private final String STATELOCATION = "Current.state";
    
    private DefaultListModel campusListModel;
    private DefaultListModel buildingListModel;
    private DefaultListModel floorListModel;
    private DefaultListModel roomListModel;
    private DefaultListModel roomDisplayListModel;
    
    private DefaultListModel logListModel;
    
    private DefaultComboBoxModel locationStates;
    private Location selectedLocation;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        Component thisFrame = this;
        
        campusListModel = new DefaultListModel();
        buildingListModel = new DefaultListModel();
        floorListModel = new DefaultListModel();
        roomListModel = new DefaultListModel();
        roomDisplayListModel = new DefaultListModel();
        
        logListModel = new DefaultListModel();
        
        locationStates = new DefaultComboBoxModel();
        
        Log.Logger().AddLogObserver(this);
        Data.LoadState(STATELOCATION);
        
        UpdateLocationStates(); 
        
        RefreshCampusListModel();
        
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                switch (JOptionPane.showConfirmDialog(thisFrame, 
                                    "Would you like to save all data before exiting?",
                                    "Save?", JOptionPane.YES_NO_CANCEL_OPTION,
                                    JOptionPane.QUESTION_MESSAGE)){
                    case JOptionPane.YES_OPTION:
                        Data.SaveState(STATELOCATION, Data.allCampuses, Data.allKeycards);
                        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        break;
                    case JOptionPane.CANCEL_OPTION:
                        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
                        break;
                    case JOptionPane.NO_OPTION:
                        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        break;                        
                }
            }
        });
        
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstRooms = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstCampuses = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstBuildings = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstFloors = new javax.swing.JList<>();
        btnSaveAll = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        lstLog = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        cbxState = new javax.swing.JComboBox<>();
        btnAddLocation = new javax.swing.JButton();
        btnUpdateMode = new javax.swing.JButton();
        btnAddCampus = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Keycard System");

        lstRooms.setModel(roomDisplayListModel);
        lstRooms.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lstRoomsMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(lstRooms);

        lstCampuses.setModel(campusListModel);
        lstCampuses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lstCampusesMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(lstCampuses);

        lstBuildings.setModel(buildingListModel);
        lstBuildings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lstBuildingsMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(lstBuildings);

        lstFloors.setModel(floorListModel);
        lstFloors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lstFloorsMouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(lstFloors);

        btnSaveAll.setText("Save All Data");
        btnSaveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAllActionPerformed(evt);
            }
        });

        lstLog.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        lstLog.setModel(logListModel);
        lstLog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstLogMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(lstLog);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Current mode:");

        cbxState.setModel(locationStates);
        cbxState.setEnabled(false);

        btnAddLocation.setText("Add Child Location");
        btnAddLocation.setEnabled(false);
        btnAddLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddLocationActionPerformed(evt);
            }
        });

        btnUpdateMode.setText("Update");
        btnUpdateMode.setEnabled(false);
        btnUpdateMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateModeActionPerformed(evt);
            }
        });

        btnAddCampus.setText("Add New Campus");
        btnAddCampus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCampusActionPerformed(evt);
            }
        });

        jButton1.setForeground(new java.awt.Color(255, 0, 0));
        jButton1.setText("Delete Location");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSaveAll))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbxState, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdateMode)
                                .addGap(332, 332, 332))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnAddCampus)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAddLocation)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUpdateMode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbxState, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddCampus, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(309, 309, 309)
                .addComponent(btnSaveAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAllActionPerformed
        Data.SaveState(STATELOCATION, Data.allCampuses, Data.allKeycards);
    }//GEN-LAST:event_btnSaveAllActionPerformed

    private void lstLogMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstLogMouseClicked
        DeselectLogItem();
    }//GEN-LAST:event_lstLogMouseClicked

    private void lstBuildingsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstBuildingsMouseReleased
        SetLocationToBuilding();
        UpdateStateDropdown();
        RefreshFloorListModel();
        EnableControls();
    }//GEN-LAST:event_lstBuildingsMouseReleased

    private void lstFloorsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstFloorsMouseReleased
        SetLocationToFloor();
        UpdateStateDropdown();
        RefreshRoomListModel();
        EnableControls();
    }//GEN-LAST:event_lstFloorsMouseReleased

    private void lstCampusesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstCampusesMouseReleased
        SetLocationToCampus();
        UpdateStateDropdown();
        RefreshBuildingListModel();
        EnableControls();
    }//GEN-LAST:event_lstCampusesMouseReleased

    private void lstRoomsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstRoomsMouseReleased
        SetLocationtoRoom();
        UpdateStateDropdown();
        DisableChildControls();
    }//GEN-LAST:event_lstRoomsMouseReleased

    private void btnAddLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddLocationActionPerformed
        NewChildLocation();
    }//GEN-LAST:event_btnAddLocationActionPerformed

    private void btnUpdateModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateModeActionPerformed
        UpdateCurrentState();
    }//GEN-LAST:event_btnUpdateModeActionPerformed

    private void btnAddCampusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCampusActionPerformed
        NewCampusLocation();
    }//GEN-LAST:event_btnAddCampusActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DeleteLocation();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCampus;
    private javax.swing.JButton btnAddLocation;
    private javax.swing.JButton btnSaveAll;
    private javax.swing.JButton btnUpdateMode;
    private javax.swing.JComboBox<String> cbxState;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JList<String> lstBuildings;
    private javax.swing.JList<String> lstCampuses;
    private javax.swing.JList<String> lstFloors;
    private javax.swing.JList<String> lstLog;
    private javax.swing.JList<String> lstRooms;
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void ObservedStateUpdate(String message) {
        logListModel.addElement(message);
        if (logListModel.getSize() == 6)
            logListModel.remove(0);
    }
    
    
    private void RefreshCampusListModel() {
        campusListModel.clear();
        buildingListModel.clear();
        floorListModel.clear();
        roomListModel.clear();
        roomDisplayListModel.clear();
        
        Data.allCampuses.values().forEach((campus) -> {
            campusListModel.addElement(campus.GetName());
        });
    }

    private void RefreshBuildingListModel() {
        buildingListModel.clear();
        floorListModel.clear();
        roomListModel.clear();
        roomDisplayListModel.clear();
        
        Campus selectedCampus = Data.allCampuses.get(lstCampuses.getSelectedValue());
        
        for(Building building : selectedCampus.GetAllChildren()){
            buildingListModel.addElement(building.GetName());
        }
    }

    private void RefreshFloorListModel() {
        floorListModel.clear();
        roomListModel.clear();
        roomDisplayListModel.clear();
        
        Campus selectedCampus = Data.allCampuses.get(lstCampuses.getSelectedValue());
        Building selectedBuilding = selectedCampus.GetChild(lstBuildings.getSelectedValue());
        
        for(Floor floor : selectedBuilding.GetAllChildren()){
            floorListModel.addElement(floor.GetFloorNumber());
        }
    }

    private void RefreshRoomListModel() {
        roomListModel.clear();
        roomDisplayListModel.clear();
        Campus selectedCampus = Data.allCampuses.get(lstCampuses.getSelectedValue());
        Building selectedBuilding = selectedCampus.GetChild(lstBuildings.getSelectedValue());
        Floor selectedFloor = selectedBuilding.GetChild(lstFloors.getSelectedValue());
        
        for(Room room : selectedFloor.GetAllChildren()){
            roomDisplayListModel.addElement(selectedFloor.GetFloorNumber() + room.GetNumber() + " (" + room.GetRoomType() + ")");
            roomListModel.addElement(room.GetNumber());
        }
    }

    private void DeselectLogItem() {
        lstLog.clearSelection();
    }

    private void UpdateStateDropdown() {
        for (int i = 0; i < locationStates.getSize(); i++) {
            if (locationStates.getElementAt(i) == selectedLocation.GetState().GetName()){
                cbxState.getModel().setSelectedItem(selectedLocation.GetState().GetName());
            }
        }
    }

    private void EnableControls() {
        cbxState.setEnabled(true);
        btnUpdateMode.setEnabled(true);
        btnAddLocation.setEnabled(true);
    }

    private void DisableChildControls() {
        btnAddLocation.setEnabled(false);
    }

    private void UpdateLocationStates() {
        locationStates.removeAllElements();
        for (LocationState state : LocationState.values()) {
            locationStates.addElement(state.GetName());
        }
    }

    private void SetLocationToCampus() {
        selectedLocation = Data.allCampuses.get(lstCampuses.getSelectedValue());
    }

    private void SetLocationToBuilding() {
        SetLocationToCampus();
        selectedLocation = ((Campus)selectedLocation).GetChild(lstBuildings.getSelectedValue());
    }

    private void SetLocationToFloor() {
        SetLocationToBuilding();
        selectedLocation = ((Building)selectedLocation).GetChild(lstFloors.getSelectedValue());
    }

    private void SetLocationtoRoom() {
        SetLocationToFloor();
        selectedLocation = ((Floor)selectedLocation).GetChild((String)roomListModel.getElementAt(lstRooms.getSelectedIndex()));
    }

    private void UpdateCurrentState() {
        selectedLocation.SetRoomState(LocationState.values()[cbxState.getSelectedIndex()]);
    }

    private void NewChildLocation() {
        if (selectedLocation instanceof Campus){
            NewBuilding dialog = new NewBuilding(this, true);
            dialog.setVisible(true);
            if(dialog.WasCreatePressed()){
                ((Campus)selectedLocation).AddBuilding(dialog.GetName(), dialog.GetShortcode());
                RefreshBuildingListModel();
            }
        } else if (selectedLocation instanceof Building){
            ((Building)selectedLocation).AddFloor();
            RefreshFloorListModel();
        } else if (selectedLocation instanceof Floor){
            NewRoom dialog = new NewRoom(this, true);
            dialog.setVisible(true);
            if(dialog.WasCreatePressed()){
                ((Floor)selectedLocation).AddRoom(dialog.GetType());
                RefreshRoomListModel();
            }
        } else {
            
        }
    }

    private void NewCampusLocation() {
        NewCampus dialog = new NewCampus(this, true);
        dialog.setVisible(true);
        if(dialog.WasCreatePressed()){
            Data.allCampuses.put(dialog.GetName(), new Campus(dialog.GetName()));
            RefreshCampusListModel();
        }
    }

    private void DeleteLocation() {
        String message = "Are you really sure you want to perminantly delete this location?"
                                    + "\nIt will not be recoverable";        
        if (selectedLocation instanceof Floor || selectedLocation instanceof Room)
            message += " and removing it may cause numbered locations to have un-fillable gaps!";
        else
            message += "!";
        
        String[] options = {"Yes, Delete It", "No, Save It"};
        switch (JOptionPane.showOptionDialog(this,
                            message,
                            "Delete this location?",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.WARNING_MESSAGE,
                            null,
                            options,
                            options[1])){
            default:
                break;
            case 0:
                if (selectedLocation instanceof Campus){
                    Data.allCampuses.remove(((Campus)selectedLocation).GetName());
                    RefreshCampusListModel();
                    selectedLocation = null;
                } else if (selectedLocation instanceof Building){
                    Campus parent = ((Building)selectedLocation).GetCampus();
                    parent.RemoveBuilding((Building)selectedLocation);
                    RefreshBuildingListModel();
                    selectedLocation = ((Building)selectedLocation).GetCampus();
                } else if (selectedLocation instanceof Floor){
                    Building parent = ((Floor)selectedLocation).GetBuilding();
                    parent.RemoveFloor((Floor)selectedLocation);
                    RefreshFloorListModel();
                    selectedLocation = ((Floor)selectedLocation).GetBuilding();
                } else {
                    Floor parent = ((Room)selectedLocation).GetFloor();
                    parent.RemoveRoom((Room)selectedLocation);
                    RefreshRoomListModel();
                    selectedLocation = ((Room)selectedLocation).GetFloor();
                    EnableControls();
                }
                break;
        }
    }
}
